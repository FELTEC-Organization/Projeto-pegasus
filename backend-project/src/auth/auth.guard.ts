import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { jwtConstants } from './constants';
import { Request } from 'express';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private jwtService: JwtService) {}
  
  /**
   * M√©todo de ativa√ß√£o do guard que verifica a autentica√ß√£o do usu√°rio.
   *
   * @param context O contexto da execu√ß√£o.
   * @returns Um valor booleano que indica se o usu√°rio est√° autenticado.
   * @throws UnauthorizedException Se a autentica√ß√£o falhar.
   */
  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    const token = this.extractTokenFromHeader(request);
    
    // Verifica se o token est√° ausente.
    if (!token) {
      throw new UnauthorizedException('N√£o autenticado. Fa√ßa login para acessar esta rota.');
    }

    try {
      // Verifica o token com a chave secreta.
      const payload = await this.jwtService.verifyAsync(token, {
        secret: jwtConstants.secret,
      });

      // üí° Atribui o payload ao objeto de requisi√ß√£o (request) para acess√°-lo nos handlers de rota.
      request['user'] = payload;
    } catch {
      // Lan√ßa uma exce√ß√£o de UnauthorizedException se a verifica√ß√£o do token falhar.
      throw new UnauthorizedException('N√£o autenticado. Fa√ßa login para acessar esta rota.');
    }

    // Retorna true para permitir o acesso √† rota protegida.
    return true;
  }

  /**
   * Extrai o token do cabe√ßalho de autoriza√ß√£o da requisi√ß√£o.
   *
   * @param request O objeto de requisi√ß√£o HTTP.
   * @returns O token JWT ou undefined se n√£o for encontrado.
   */
  private extractTokenFromHeader(request: Request): string | undefined {
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    return type === 'Bearer' ? token : undefined;
  }
}
